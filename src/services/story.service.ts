import * as storyRepository from "../repositories/story.repository";
import * as stageRepository from "../repositories/stage.repository";
import { openai } from "../utils/openai";

// get random premise generated by AI
export async function getRandomPremise() {
   const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
         {
            role: "system",
            content: [
               {
                  type: "text",
                  text: "You are an interesting children story teller. Create an interesting premise for short kids story. It must exclude magic. Keep it real. The time setting could be present, past or future. The main character could be anything. Keep it short. Example: A boy trying to fly using a giant kite. CRITICAL: the premise is only 1 sentence and short.",
               },
            ],
         },
      ],
      temperature: 1.5,
      max_tokens: 2048,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
      response_format: {
         type: "json_schema",
         json_schema: {
            name: "premise_schema",
            schema: {
               type: "object",
               required: ["premise"],
               properties: {
                  premise: {
                     type: "string",
                     description: "The short kids story premise",
                  },
               },
               additionalProperties: false,
            },
            strict: true,
         },
      },
   });

   return JSON.parse(response.choices[0].message?.content as string);
}

// validate user own premise using AI
export async function validatePremise(premise: string) {
   const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
         {
            role: "system",
            content: [
               {
                  text: "You are a child story teller. Given a story premise. Validate whether the premise suitable for kids or not. If invalid, suggest a premise for a kids short story related with given invalid premise. If valid, refine the premise given, so it gets more interesting. CRITICAL: Your generated premise must be 1 sentence and short, don't include magic, the character could be anything, the place could be everywhere, the time setting could be past, present or the future.",
                  type: "text",
               },
            ],
         },
         {
            role: "user",
            content: premise,
         },
      ],
      temperature: 1.2,
      max_tokens: 2048,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
      response_format: {
         type: "json_schema",
         json_schema: {
            name: "validation_result",
            strict: true,
            schema: {
               type: "object",
               required: ["isValid", "suggestedPremise"],
               properties: {
                  isValid: {
                     type: "boolean",
                     description: "Indicates whether the validation succeeded.",
                  },
                  suggestedPremise: {
                     type: "string",
                     description: "The suggested premise or refined premise",
                  },
               },
               additionalProperties: false,
            },
         },
      },
   });

   return JSON.parse(response.choices[0].message?.content as string);
}

// create a new story only by premise, all other data is marked temporary or ongoing
export function createNewStory(premise: string) {
   const MIN_STAGE_NUMBER = 4;
   const MAX_STAGE_NUMBER = 7;

   const storyData = {
      title: "Ongoing Story ...",
      description: premise + " [temporary]",
      thumbnail: "",
      premise,
      isFinish: false,
      maxStage: MIN_STAGE_NUMBER + Math.floor(Math.random() * (MAX_STAGE_NUMBER - MIN_STAGE_NUMBER)),
   };

   const newStory = storyRepository.create(storyData);
   return newStory;
}

// complete a story metadata using AI (when a story is finished)
export async function completeStoryMetadata(data: { storyId: string; storyContext: string }) {
   const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
         {
            role: "system",
            content: [
               {
                  type: "text",
                  text: "Given a kids story, create a suitable title and description for the story. Description is 2 sentences or less. Do not sound like a commercial. Do not try to convice reader to read the story.",
               },
            ],
         },
         {
            role: "user",
            content: data.storyContext,
         },
      ],
      temperature: 1,
      max_tokens: 2048,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
      response_format: {
         type: "json_schema",
         json_schema: {
            name: "json_schema",
            strict: true,
            schema: {
               type: "object",
               properties: {
                  title: {
                     type: "string",
                     description: "The title of the story object.",
                  },
                  description: {
                     type: "string",
                     description: "A description of the story.",
                  },
               },
               required: ["title", "description"],
               additionalProperties: false,
            },
         },
      },
   });

   const { title, description } = JSON.parse(response.choices[0].message?.content as string);

   const storyUpdated = storyRepository.update(data.storyId, { title, description });
   return storyUpdated;
}

// delete a story and all its stages
export function deleteStoryAndStages(storyId: string) {
   storyRepository.deleteById(storyId);
   stageRepository.deleteByStoryId(storyId);
   return { message: "Story and stages deleted successfully" };
}
